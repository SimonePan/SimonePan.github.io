<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凡心所向，素履所往</title>
  
  <subtitle>写意人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-09T06:28:01.862Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Grace Pan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高性能MySQl读书笔记-第一天.md</title>
    <link href="http://yoursite.com/uncategorized/%E9%AB%98%E6%80%A7%E8%83%BDMySQl%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E5%A4%A9-md/"/>
    <id>http://yoursite.com/uncategorized/高性能MySQl读书笔记-第一天-md/</id>
    <published>2018-08-09T01:53:03.000Z</published>
    <updated>2018-08-09T06:28:01.862Z</updated>
    
    <content type="html"><![CDATA[<p>1.1 逻辑架构</p><p><img src="/uncategorized/高性能MySQl读书笔记-第一天-md/mysql逻辑架构.png" alt="Mysql逻辑架构"></p><p>第一层：客户端/服务器的连接、授权认证、安全等。</p><a id="more"></a><p>第二层：查询解析，分析，优化，缓存，内置函数（日期，时间，数学，加密等），存储过程，触发器，视图等。</p><p>第三层：存储引擎，负责数据的存取。服务器通过API与存储引擎通信。存储引擎API包含几十个底层函数，用于执行诸如”开始一个事务“或”根据主键提取一行记录“等操作。==每种存储引擎都可以实现自己的锁策略、锁粒度、事务和隔离级别==。存储引擎不会去解析SQL（InnoDB除外，它会解析外键定义）。不同存储引擎之间也不会互相通信，只是简单地响应上层服务器的请求。</p><h3 id="1-1-1-连接管理与安全性"><a href="#1-1-1-连接管理与安全性" class="headerlink" title="1.1.1 连接管理与安全性"></a>1.1.1 连接管理与安全性</h3><p>每个客户端连接都是单线程，轮流在某个CPU核心或CPU中运行。服务器会负责缓存线程，因此不需要为每个新建的连接创建或销毁线程（MySQL 5.5 或更新的版本提供啦一个API，支持线程池插件，可以使用池中少量的线程来服务大量的连接）。</p><h3 id="1-1-2-优化与执行"><a href="#1-1-2-优化与执行" class="headerlink" title="1.1.2 优化与执行"></a>1.1.2 优化与执行</h3><p>MySQL 会解析查询，并创建内部数据结构（解析树），然后对其进行优化，包括重写查询、决定表的读取顺序，以及选择合适的索引等。用户可通过特殊的关键字提示（hint）优化器，影响它的决策过程。也可请求优化器解释（explain）优化过程中的各个因素，了解服务器优化过程，便于重构查询和schema、修改配置。详见第6章。</p><p>优化器会请求存储引擎提供容量或某个具体操作的开销信息，以及表数据的统计信息等。详见第4、5章。</p><p>对于 select 语句，在解析查询之前，服务器会先检查查询缓存（Query Cache），如果能够再其中找到对应的查询，服务器就不必再执行查询解析、优化和执行的整个过程，而是直接返回查询缓存中的结果集。详见第7章。</p><h2 id="1-2-并发执行"><a href="#1-2-并发执行" class="headerlink" title="1.2 并发执行"></a>1.2 并发执行</h2><p>只要有多个查询需要在同一时刻修改数据，就会产生并发控制的问题。本章讨论的目的是讨论MySQL在两个层面的并发控制：服务器层和存储引擎层。</p><h3 id="1-2-1-读写锁"><a href="#1-2-1-读写锁" class="headerlink" title="1.2.1 读写锁"></a>1.2.1 读写锁</h3><p>在处理并发读或写时，可以通过实现一个由两种类型的锁组成的锁系统来解决问题。这两种类型的锁通常被称为共享锁（shared lock）和排他锁（exclusive lock），也叫读锁（read lock）和写锁（write lock）。</p><p>读锁是共享的，是互不阻塞的。多个客户在同一时刻读取同一个资源，而互不干扰。</p><p>写锁是排他的，也就是说一个写锁会阻塞其他的写锁和读写。</p><h3 id="1-2-2-锁粒度"><a href="#1-2-2-锁粒度" class="headerlink" title="1.2.2 锁粒度"></a>1.2.2 锁粒度</h3><p>加锁需要消耗资源。锁的各种操作，包括获取锁、检查锁是否已经释放、是否锁等，都会增加系统的开销。</p><p>锁策略：在锁的开销和数据的安全性之间寻求平衡。</p><p>==每种存储引擎都可以实现自己的锁策略和锁粒度==。将锁粒度固定在某个级别，可以为某些特定的应用场景提供更好的性能，但同上会失去对另外一些应用场景的良好支持。</p><p><strong>表锁（table lock）</strong></p><p>表锁是MySQL中最基本的锁策略，并且是开销最小的策略。它会锁定整张表。一个用户在对表进行写操作（插入、删除、更新等）前，需要先获得写锁，这会阻塞其他用户对该表的所有读写操作。</p><p>在特定的场景中，表锁也可能有良好的性能。例如，<strong>read lock表锁支持某些类型的并发写操作</strong>。另外，写锁也比读锁有更高的优先级，因此写锁可以插入到锁队列中读锁的前面。</p><p>尽管存储引擎可以管理自己的锁，MySQL本身还是会使用各种有效的表锁来实现不同的目的。例如，服务器会为诸如ALTER TABLE之类的语句使用表锁，而忽略存储引擎的锁机制。</p><p><strong>行级锁（row lock)</strong></p><p>行级锁可以最大程度地支持并发处理（同时也带来了最大的锁开销）。==行级锁只在存储引擎层实现==。</p><h2 id="1-3-事务"><a href="#1-3-事务" class="headerlink" title="1.3 事务"></a>1.3 事务</h2><p><strong>原子性（atomicity)</strong></p><p>一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作，要么全部提交成功，要么全部失败会滚。</p><p><strong>一致性（consistency)</strong></p><p>数据库总是从一个一致性的状态转换到另一个一致性的状态。在前面的例子中，一致性确保了，即使在执行第三、四条语句之间时系统崩溃，事务中所做的修改也不会保存到数据库中，系统中的数据也不会更新。</p><p><strong>隔离性（isolation)</strong></p><p>事务所做的修改在最终提交前，通常来说，对其他事务是不可见的。例如，事务A：原本余额100，扣除余额100。当事务A没提交前，事务B去获取余额，看到的金额为100。<strong>实际情况须依据1.3.1隔离级别</strong></p><p><strong>持久性（durability)</strong></p><p>一旦事务提交，则所做的修改就会永久的保存在数据库中。</p><p>就像锁粒度的升级会增加系统开销一样，这种事务处理过程中额外的安全性，也会需要数据库系统做更多的额外工作。一个实现了ACID的数据库，通常会需要更强的CPU、更大的内存和更多的磁盘空间。</p><h3 id="1-3-1-隔离级别"><a href="#1-3-1-隔离级别" class="headerlink" title="1.3.1 隔离级别"></a>1.3.1 隔离级别</h3><p>==每种存储引擎实现的隔离级别不尽相同。==</p><p><strong>READ UNCOMMITTED（未提交读）</strong></p><p>事务中的修改，即使没提交，对其他事务也都是可见的。这也称脏读（Dirty Read）。这个级别，从性能上，并没有比其他级别好太多，但却缺乏其他级别的好处。</p><p><strong>READ COMMITED（提交读）</strong></p><p>大多数默认数据库的默认隔离级别（但MySQL不是）。一个事务开始时，只能“看见”已经提交的事务所做的修改。这也叫不可重复读（Nonrepeatable Read），因为两次执行同样的查询，可能会得到不一样的结果。</p><p>解释：多次读取同一条记录，每次读取到的记录内容可能不一致。</p><p><strong>==REPEATABLE READ（可重复读）==</strong></p><p>解决了脏读。该级别保证了在同一个事务中多次读取同样记录的结果是一致的。但无法解决幻读（Phantom Read）。幻读指当某个事物在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行（Phantom Row）。InnoDB和XtraDB存储引擎通过多版本并发控制（MVCC）解决了幻读的问题。</p><p>解释：多次读取同一条记录，每次读取到的记录内容一致。</p><p><a href="https://segmentfault.com/a/1190000012669504" target="_blank" rel="noopener">幻读</a>：多次读取某个范围内的多条记录时，由于同时有数据新增或删除，会导致再次读取时，某个范围内的记录增加或减少，导致多次读取结果不一致。</p><p>可重复读诗MySQL的默认事务隔离级别</p><p>SERIALIZABLE（可串行化）</p><p>最高的隔离级别。它通过强制事务串行执行，避免了前面的幻读问题。它会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用的问题。</p><h3 id="1-3-2-死锁"><a href="#1-3-2-死锁" class="headerlink" title="1.3.2 死锁"></a>1.3.2 死锁</h3><p>死锁是指两个或多个事务在同一资源上互相占用，并请求锁定对方占用的资源，从而导致恶性循环的现象。当多个事务时图以不同的顺序锁定资源时，就可能产生死锁。多个事务同时锁定同一个资源，也会产生死锁。</p><p>为解决这种问题，数据库系统实现了各种死锁检测和死锁超时机制。InnoDB目前处理死锁的方式是：将持有最少行级排他锁的事务进行回滚。</p><p>==锁的行为和顺序是和存储引擎相关的。==以同样的顺序执行语句，有些存储引擎会产生死锁，有些则不会。死锁的产生有双重原因：1. 真正的数据冲突。2.存储引擎的实现方式。</p><p>死锁方式以后，只有部分或完全回滚其中一个事务，才能打破死锁。</p><h3 id="1-3-3-事务日志"><a href="#1-3-3-事务日志" class="headerlink" title="1.3.3 事务日志"></a>1.3.3 事务日志</h3><p>事务日志可以帮助提高事务的效率。使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘上的事务日志中，而不用每次都讲修改的数据本身持久到磁盘。事务日志采用的是追加的方式，因此写日志的操作是磁盘上一小块区域内的顺序I/O，而不像随机I/O需要在磁盘的多个地方移动磁头，所以采用事务日志的方式相对来说要快得多。事务日志持久之后，内存中被修改的数据在后台可以慢慢地刷回磁盘。目前大多数存储引擎都是这样实现的，我们通常称之为预写式日志（Write-Ahead Logging），修改数据需要写两次磁盘。</p><p>如果数据的修改已经记录到事务日志并持久化，但数据本身还灭有写回磁盘，此时系统崩溃，存储引擎在重启时能够自动恢复这部分修改的数据。具体到恢复方式则视存储引擎而定。</p><h3 id="1-3-4-MySQL中的事务"><a href="#1-3-4-MySQL中的事务" class="headerlink" title="1.3.4 MySQL中的事务"></a>1.3.4 MySQL中的事务</h3><p>MySQL提供了两种事务型的存储引擎：InnoDB 和 NDB Cluster。另外还有一些第三方存储引擎也支持事务，比较知名的包括 XtraDB 和 PBXT。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.1 逻辑架构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uncategorized/高性能MySQl读书笔记-第一天-md/mysql逻辑架构.png&quot; alt=&quot;Mysql逻辑架构&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一层：客户端/服务器的连接、授权认证、安全等。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
